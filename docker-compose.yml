# docker-compose.yml

services:
  # 1. Der Datenbank-Service
  co2-aware-db:
    image: postgres:14-alpine
    container_name: co2-aware-db
    restart: always
    environment:
      POSTGRES_DB: co2_aware_db
      POSTGRES_USER: user
      POSTGRES_PASSWORD: password
    ports:
      - "5432:5432"
    volumes:
      - ./postgres-data:/var/lib/postgresql/data
    networks:
      app-network:
        aliases:
          - co2-aware-db
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U user -d co2_aware_db"]
      interval: 10s   # PrÃ¼fe alle 10 Sekunden
      timeout: 5s     # Warte maximal 5 Sekunden auf eine Antwort
      retries: 5      # Versuche es 5 Mal, bevor der Status auf "unhealthy" gesetzt wird

  # 2. Der Backend-Service
  co2-aware-backend:
    container_name: co2-aware-backend
    build:
      context: ./backend
    restart: always
    ports:
      - "5000:5000"
    depends_on:
      co2-aware-db:
        condition: service_healthy
    environment:
      DB_HOST: co2-aware-db
      DB_USER: user
      DB_PASSWORD: password
      DB_NAME: co2_aware_db
      DB_PORT: 5432
      APP_MODE: CLASSIC
    networks:
      - app-network
    command: >
      sh -c "
        npx --yes wait-on tcp:${DB_HOST:-co2-aware-db}:${DB_PORT:-5432} &&
        npm run db:seed && node server.js
      "

  # 3. Der Frontend-Service
  co2-aware-frontend:
    container_name: co2-aware-frontend
    build:
      context: ./co2-aware-frontend
    ports:
      - "8080:80"
      - "8443:443"
    depends_on:
      - co2-aware-backend
    networks:
      - app-network
    command: sh -c "echo 'ðŸš€ Frontend ist bereit unter http://localhost:8080' && nginx -g 'daemon off;'"
  
  testrunner:
    container_name: co2-aware-testrunner
    build: ./testrunner
    volumes:
      - ./testrunner:/usr/src/app
    networks:
      - app-network
    depends_on:
      - co2-aware-db
      - co2-aware-backend
      - co2-aware-frontend
    environment:
      - BASE_URL=http://co2-aware-frontend
      - APP_MODE=CLASSIC


# Definition des Netzwerks
networks:
  app-network:
    driver: bridge
